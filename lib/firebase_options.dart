// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'dart:io' show Platform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ... 
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android {
    // Get API key from environment variable or use a placeholder
    final apiKey = const String.fromEnvironment('FIREBASE_API_KEY', 
        defaultValue: 'YOUR_API_KEY_HERE');
    
    if (apiKey == 'YOUR_API_KEY_HERE') {
      throw UnsupportedError(
        'Firebase API key not found. Please set FIREBASE_API_KEY environment variable '
        'or run: flutterfire configure'
      );
    }

    return FirebaseOptions(
      apiKey: apiKey,
      appId: const String.fromEnvironment('FIREBASE_APP_ID', 
          defaultValue: '1:562989165357:android:3f9456bc53e23a757e81a4'),
      messagingSenderId: const String.fromEnvironment('FIREBASE_SENDER_ID', 
          defaultValue: '562989165357'),
      projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID', 
          defaultValue: 'intellicash-6db34'),
      storageBucket: const String.fromEnvironment('FIREBASE_STORAGE_BUCKET', 
          defaultValue: 'intellicash-6db34.firebasestorage.app'),
    );
  }
}